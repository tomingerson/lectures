repositories {
    jcenter()
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    group 'de.fh_kiel'
    version '1.0'
}

subprojects {
    dependencies {
        compile 'org.apache.commons:commons-lang3:3.+'
        compile 'org.slf4j:slf4j-simple:1.+'
        testCompile 'junit:junit:4.+'
    }
}

  project(':lecture2:showcases') {
      sourceSets {
          generated {
              java {
                  srcDirs = ['src/main/generated']
              }
          }
      }
  
      dependencies {
          compile project(':lecture2:api')
          compile project(':lecture2:annotation-processing')
  
          compile 'com.google.inject:guice:4.1.+'
          compile 'org.springframework:spring-context:4.+'
  
          testCompile 'org.jmockit:jmockit:1.+'
          testCompile 'org.mockito:mockito-core:1.10.+'
      }
  
      task runProcessor(type: JavaCompile, group: 'build', description: 'extracts feeding information') {
          source = sourceSets.main.java
          classpath = configurations.compile
          options.compilerArgs = [
                  "-proc:only",
                  "-processor", "processing.FeedingProcessor"
          ]
          destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
      }
  
      compileJava {
          dependsOn runProcessor
          source runProcessor.destinationDir
      }
  
      compileGeneratedJava {
          dependsOn runProcessor
          options.warnings = false
          classpath += sourceSets.main.runtimeClasspath
      }
  
      clean {
          delete sourceSets.generated.java.srcDirs
      }
  
      idea {
          module {
              sourceDirs += file('src/main/generated ')
          }
      }
  
  }
  
  project(':lecture2:annotation-processing') {
  
      dependencies {
          compile project(':lecture2:api')
      }
  }

project(':lecture4') {

  dependencies {
      compile project(':lecture2')
      testCompile 'junit:junit:4.+'
  }
}

project(':lecture6') {

    dependencies {
        compile project(':lecture2'), project(':lecture4')
    }
}
